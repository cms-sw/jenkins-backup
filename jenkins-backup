#!/bin/bash -ex
FORCE_ENC=false
PUSH_CHG=false
FORCE_PUSH=false
FULL_VERSION=false
BACK_REPO=""
JOBS_EXCLUDE_FILTER=""
while [[ $# -gt 0 ]] ; do
  opt=$1; shift
  case $opt in
    -e|--encrypt)    FORCE_ENC=true;;
    -p|--push)       PUSH_CHG=true;;
    -f|--force)      FORCE_PUSH=true;;
    -v|--version)    FULL_VERSION=true;;
    -r|--repository) BACK_REPO=$1; shift ;;
    -x|--exclude)    JOBS_EXCLUDE_FILTER=$1; shift
  esac
done
if [ "X${BACK_REPO}" = "X" ] ; then
  echo "ERROR: Missing backup repository. Usage $0 -r https://github.com/user/repo"
  exit 1
fi
if [ "X$JENKINS_HOME" = "X" ] ; then JENKINS_HOME=/var/lib/jenkins ; fi
if [ "X$WORKSPACE" = "X" ] ; then WORKSPACE=$(/bin/pwd) ; fi
script_dir=$(dirname $0)
LOCALCLI_KEY=${HOME}/.ssh/id_dsa
jenkins_prefix=
if [ -e ${JENKINS_HOME}/jenkins_prefix ] ; then
  jenkins_prefix=$(cat ${JENKINS_HOME}/jenkins_prefix)
  if [ "${jenkins_prefix}" = "" ] ; then
    echo "ERROR: Empty ${JENKINS_HOME}/jenkins_prefix. Please populate it with jenkins prefix e.g. jenkins and then run"
    exit 1
  fi
fi
LOCAL_JENKINS_URL=http://localhost:$(pgrep -x -a  -f ".*httpPort=.*" | tail -1 | tr ' ' '\n' | grep httpPort | sed 's|.*=||')
if [ ! -f $WORKSPACE/jenkins-cli.jar ] ; then
  /usr/bin/wget --no-check-certificate -O ${WORKSPACE}/jenkins-cli.jar "${LOCAL_JENKINS_URL}/${jenkins_prefix}/jnlpJars/jenkins-cli.jar" || true
fi
branch=$(java -jar ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} version)
if ! $FULL_VERSION ; then branch=$(echo $branch | cut -d. -f1,2 | sed 's|.$||;s|\.$|\.0|') ; fi
GIT_BRANCH=${jenkins_prefix}${branch}
GIT_DIR=${WORKSPACE}/.backup/${GIT_BRANCH}
mkdir -p $(dirname $GIT_DIR)
if [ ! -d $GIT_DIR ] ; then git clone $BACK_REPO $GIT_DIR ; fi
cd $GIT_DIR
if [ $(git branch -a | grep remotes/origin/${GIT_BRANCH} | wc -l) -gt 0 ] ; then
  git checkout ${GIT_BRANCH} || true
  git clean -fdx
  git checkout -q --force $GIT_BRANCH
  git reset --hard origin/$GIT_BRANCH
else
  git checkout --orphan ${GIT_BRANCH}
  rm -rf * || true
  touch README.md
  git add -A
  git commit -a -m "Init new branch ${GIT_BRANCH}"
  git push origin ${GIT_BRANCH}
fi

for dir in labels users nodes log ; do
  mkdir -p $GIT_DIR/$dir
  rsync -av --delete --include="*.xml" --delete-excluded  --exclude='*/.git*' $JENKINS_HOME/$dir/ $GIT_DIR/$dir/
done
rm -rf $GIT_DIR/scriptler

mkdir -p $GIT_DIR/jobs $GIT_DIR/secrets
rsync -av --delete --delete-excluded $JOBS_EXCLUDE_FILTER --exclude="*/builds/*" --exclude="*/ws/*" --exclude="*/ws_[0-9]*/*" --exclude="*/lastStable/*" --exclude="*/lastSuccessful/*" --exclude="*/disk-usage.xml" $JENKINS_HOME/jobs/ $GIT_DIR/jobs/

for xml in $(ls $JENKINS_HOME/*.xml) ; do cp -f $xml $GIT_DIR/ ; done
for s in identity.key.enc secrets/org.jenkinsci.main.modules.instance_identity.InstanceIdentity.KEY ; do
  rm -f  $GIT_DIR/$s || true
done

. ${script_dir}/jenkins-secrets
for s in ${JENKINS_SECRETS_FILES} ; do
  key=$JENKINS_HOME/$s
  bkey=${GIT_DIR}/${s}.chksum
  ekey=$GIT_DIR/${s}.enc
  chksum=$(sha256sum -b $key | sed 's| .*||')
  if [ -f $bkey -a -f $ekey ] ; then
    if [ "$chksum" = "$(cat $bkey)" ] ; then
      if ! $FORCE_ENC ; then continue ; fi
    fi
  fi
  echo "$chksum" >  $bkey
  openssl enc -e -md sha256 -a -base64 -aes-256-cbc -salt -in $key -out ${ekey} -pass file:$LOCALCLI_KEY
done

java -jar  ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} -remoting groovy $script_dir/get_plugins.groovy | grep -v 'scriptler' | sort > $GIT_DIR/pluginslist

if [ $(grep ':' $GIT_DIR/pluginslist | wc -l) -eq 0 ] ; then
  echo "ERROR: unable to get plugins"
  exit 1
fi
if $PUSH_CHG ; then
  git add . || true
  git commit -a -m "Updated Jenkins configuration ${GIT_BRANCH}" || true
  if ${FORCE_PUSH} || [ $(git diff --name-only HEAD origin/$GIT_BRANCH | grep -v '/nextBuildNumber$' | wc -l) -gt 0 ] ; then
    echo ">> Files changed"
    git diff --name-only HEAD origin/$GIT_BRANCH
    git push origin $GIT_BRANCH
  fi
fi

