#!/bin/bash -ex
FORCE_ENC=false
PUSH_CHG=false
FORCE_PUSH=false
FULL_VERSION=false
BACK_REPO=""
JOBS_EXCLUDE_DIRS=""
JOBS_INCLUDE_DIRS=""
LOCALCLI_KEY=${HOME}/.ssh/id_dsa
FORCE_PUSH_TIME=3600
IGNORE_SECRETS="/cmssdt-es-secret /github_hook_secret_cmsbot"
while [[ $# -gt 0 ]] ; do
  opt=$1; shift
  case $opt in
    -e|--encrypt)    FORCE_ENC=true;;
    -p|--push)       PUSH_CHG=true;;
    -f|--force)      FORCE_PUSH=true;;
    -v|--version)    FULL_VERSION=true;;
    -h|--home)       JENKINS_HOME=$1; shift ;;
    -r|--repository) BACK_REPO=$1; shift ;;
    -x|--exclude)    JOBS_EXCLUDE_DIRS=$1; shift;;
    -i|--include)    JOBS_INCLUDE_DIRS=$1; shift;;
    -k|--key)        LOCALCLI_KEY=$1; shift;;
    -u|--jenkins-url)JENKINS_URL=$1; shift;;
    -S|--ignore-secrets) IGNORE_SECRETS=$1; shift;;
    -F|--force-push-time) FORCE_PUSH_TIME=$1; shift;;
  esac
done
if [ "X${BACK_REPO}" = "X" ] ; then
  echo "ERROR: Missing backup repository. Usage $0 -r https://github.com/user/repo"
  exit 1
fi
if [ "X$JENKINS_HOME" = "X" ] ; then JENKINS_HOME=/var/lib/jenkins ; fi
if [ "X$WORKSPACE" = "X" ] ; then WORKSPACE=$(/bin/pwd) ; fi
script_dir=$(dirname $0)
jenkins_prefix=
if [ -e ${JENKINS_HOME}/jenkins_prefix ] ; then
  jenkins_prefix=$(cat ${JENKINS_HOME}/jenkins_prefix)
  if [ "${jenkins_prefix}" = "" ] ; then
    echo "ERROR: Empty ${JENKINS_HOME}/jenkins_prefix. Please populate it with jenkins prefix e.g. jenkins and then run"
    exit 1
  fi
fi
JENKINS_PORT=$(pgrep -x -a  -f ".*httpPort=.*" | tail -1 | tr ' ' '\n' | grep httpPort | sed 's|.*=||')
LOCAL_JENKINS_URL=http://localhost:${JENKINS_PORT}
if [ ! -f $WORKSPACE/jenkins-cli.jar ] ; then
  /usr/bin/wget --no-check-certificate -O ${WORKSPACE}/jenkins-cli.jar "${LOCAL_JENKINS_URL}/${jenkins_prefix}/jnlpJars/jenkins-cli.jar" || true
fi
if [ "X$JENKINS_URL" = "X" ] ; then JENKINS_URL="http://$(hostname -f):${JENKINS_PORT}/${jenkins_prefix}" ; fi
branch=$(java -jar ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} version)
if [ "X$branch" = "X" ] ; then
  echo "Error: Unable to find jenkins version"
  exit 1
fi
if ! $FULL_VERSION ; then branch=$(echo $branch | cut -d. -f1,2 | sed 's|.$||;s|\.$|\.0|') ; fi
GIT_BRANCH=${jenkins_prefix}${branch}
GIT_DIR=${WORKSPACE}/.backup/${GIT_BRANCH}
mkdir -p $(dirname $GIT_DIR)
if [ ! -d $GIT_DIR ] ; then git clone $BACK_REPO $GIT_DIR ; fi
cd $GIT_DIR
if [ $(git branch -a | grep remotes/origin/${GIT_BRANCH} | wc -l) -gt 0 ] ; then
  git checkout ${GIT_BRANCH} || true
  git clean -fdx
  git checkout -q --force $GIT_BRANCH
  git reset --hard origin/$GIT_BRANCH
else
  git checkout --orphan ${GIT_BRANCH}
  rm -rf * || true
  touch README.md
  git add -A
  git commit -a -m "Init new branch ${GIT_BRANCH}"
  git push origin ${GIT_BRANCH}
fi
LAST_COMMIT_TIME=$(git log -1 --date=short --pretty=format:%ct)

for dir in labels nodes log; do
  if [ ! -e $JENKINS_HOME/$dir ] ; then
     rm -rf $GIT_DIR/$dir
     continue
  fi
  mkdir -p $GIT_DIR/$dir
  rsync -av --delete --include="*.xml" --delete-excluded --exclude='**/.git' --exclude='**/.git/*' --exclude='**/.ssh' --exclude='**/.ssh/*' $JENKINS_HOME/$dir/ $GIT_DIR/$dir/
done

for dir in userContent ; do
  if [ ! -e $JENKINS_HOME/$dir ] ; then
     rm -rf $GIT_DIR/$dir
     continue
  fi
  mkdir -p $GIT_DIR/$dir
  rsync -av --delete --delete-excluded --exclude='**/.git' --exclude='**/.git/*' --exclude='**/.ssh' --exclude='**/.ssh/*' $JENKINS_HOME/$dir/ $GIT_DIR/$dir/
done

rm -rf $GIT_DIR/scriptler

mkdir -p $GIT_DIR/jobs $GIT_DIR/secrets
set +x
JOBS_EXCLUDE_FILTER="--exclude='*/disk-usage.xml'"
for exl in ${JOBS_EXCLUDE_DIRS} '.git' 'builds' 'lastStable' 'lastSuccessful' '.ssh' ; do
  if [ "X${exl}" = "X" ] ; then continue ; fi
  JOBS_EXCLUDE_FILTER="${JOBS_EXCLUDE_FILTER} --exclude='**/${exl}' --exclude='**/${exl}/*'"
done
JOBS_INCLUDE_FILTER=""
for inc in ${JOBS_INCLUDE_DIRS} 'config.xml' 'nextBuildNumber' ; do
  if [ "X${inc}" = "X" ] ; then continue ; fi
  JOBS_INCLUDE_FILTER="${JOBS_INCLUDE_FILTER} --include='**/${inc}'"
done
set -x
eval rsync -av --delete --delete-excluded ${JOBS_INCLUDE_FILTER} ${JOBS_EXCLUDE_FILTER} $JENKINS_HOME/jobs/ $GIT_DIR/jobs/

for xml in $(ls $JENKINS_HOME/*.xml) ; do cp -f $xml $GIT_DIR/ ; done

for k in LOCAL_JENKINS_DSA_KEY LOCAL_JENKINS_URL JENKINS_PREFIX ; do
  sed -i "/>$k</{n;s/>[^>]*</>@$k@</}" $GIT_DIR/config.xml
done

for f in $(grep "${JENKINS_URL}" ${GIT_DIR}/*.xml | sed 's|.xml:.*|.xml|' | sort | uniq) ; do
  sed -i -e "s|${JENKINS_URL}|@JENKINS_URL@|" $f
done

for conf in $(find $JENKINS_HOME/secrets -name '*.conf' -type f | sed "s|${JENKINS_HOME}/||") ; do
  mkdir -p $GIT_DIR/$(dirname ${conf})
  cp -f $JENKINS_HOME/${conf} $GIT_DIR/${conf}
done
for c in $(find $GIT_DIR/secrets -name "*.conf" -type f | sed "s|$GIT_DIR/||") ; do
  if [ ! -f $JENKINS_HOME/$c ] ; then
    rm -f $GIT_DIR/$c
  fi
done

SECRETS_FILES="$JENKINS_HOME/secret.key $JENKINS_HOME/secret.key.not-so-secret"
SECRETS_FILES="${SECRETS_FILES} $(grep '>{[^}]*}<' $JENKINS_HOME/*.xml | sed 's|\.xml:.*|.xml|' | sort | uniq)"
SECRETS_FILES="${SECRETS_FILES} $(grep '<token>' $JENKINS_HOME/*.xml | sed 's|\.xml:.*|.xml|' | sort | uniq)"
SECRETS_FILES="${SECRETS_FILES} $(find $JENKINS_HOME/secrets -type f | grep -v '\.conf$')"
SECRETS_FILES="${SECRETS_FILES} $(find $JENKINS_HOME/users/ -name '*.xml' -type f)"

for key in ${SECRETS_FILES} ; do
  s=$(echo $key | sed "s|$JENKINS_HOME/||")
  rm -f ${GIT_DIR}/${s}.chksum $GIT_DIR/${s}.enc
  IGNORE=false
  for is in ${IGNORE_SECRETS} ; do
    if [ $(echo $key | grep "$is" | wc -l) -eq 1 ] ; then
      IGNORE=true
      break
    fi
  done
  if $IGNORE ; then
    rm -f ${GIT_DIR}/${s}
    rm -f ${GIT_DIR}/${s}.jenkins-backup-*
    continue
  fi
  if [ -e ${GIT_DIR}/${s} ] ; then key=${GIT_DIR}/${s} ; fi
  if [ ! -e $key ] ; then
    rm -f ${GIT_DIR}/${s}.jenkins-backup-*
    continue
  fi
  mkdir -p ${GIT_DIR}/$(dirname $s)
  bkey=${GIT_DIR}/${s}.jenkins-backup-chksum
  ekey=$GIT_DIR/${s}.jenkins-backup-enc
  chksum=$(sha256sum -b $key | sed 's| .*||')
  if [ -f $bkey -a -f $ekey ] ; then
    if [ "$chksum" = "$(cat $bkey)" ] ; then
      if ! $FORCE_ENC ; then
        if [ -f ${GIT_DIR}/${s} ] ; then rm -f ${GIT_DIR}/${s} ; fi
        continue
      fi
    fi
  fi
  echo "$chksum" >  $bkey
  openssl enc -e -md sha256 -a -base64 -aes-256-cbc -salt -in $key -out ${ekey} -pass file:$LOCALCLI_KEY
  if [ -f ${GIT_DIR}/${s} ] ; then rm -f ${GIT_DIR}/${s} ; fi
done

for s in $(find ${GIT_DIR} -name '*.jenkins-backup-enc' -type f | sed "s|${GIT_DIR}/||;s|.jenkins-backup-enc$||") ; do
  if [ ! -e ${JENKINS_HOME}/${s} ] ; then
    rm -f ${GIT_DIR}/${s}.jenkins-backup-*
  fi
done

java -jar  ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} -remoting groovy $script_dir/get_plugins.groovy | grep -v 'scriptler' | sort > $GIT_DIR/pluginslist

if [ $(grep ':' $GIT_DIR/pluginslist | wc -l) -eq 0 ] ; then
  echo "ERROR: unable to get plugins"
  exit 1
fi

find ${JENKINS_HOME}/jobs -follow -mindepth 2 -maxdepth 2 -name 'config.xml' -type f |  xargs grep '<disabled>true' | sed "s|${JENKINS_HOME}/jobs/||;s|/.*||" | sort | uniq > ${GIT_DIR}/disabled-jobs.txt

if $PUSH_CHG ; then
  git add . || true
  git commit -a -m "Updated Jenkins configuration ${GIT_BRANCH}" || true
  #Force Commit every $FORCE_PUSH_TIME sec
  if ! ${FORCE_PUSH} ; then
    let DIFF=$(date +%s)-${LAST_COMMIT_TIME} || true
    if [ $DIFF -gt $FORCE_PUSH_TIME ] ; then FORCE_PUSH=true ; fi
  fi
  if ${FORCE_PUSH} || [ $(git diff --name-only HEAD origin/$GIT_BRANCH | grep -v 'queue.xml$' | grep -v '/nextBuildNumber$' | grep -v 'AsyncResourceDisposer.xml$'  | wc -l) -gt 0 ] ; then
    echo ">> Files changed"
    git diff --name-only HEAD origin/$GIT_BRANCH
    git push origin $GIT_BRANCH
  fi
fi
