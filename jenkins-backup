#!/bin/bash -e
FORCE_ENC=false
PUSH_CHG=false
FORCE_PUSH=false
BACK_REPO=""
JOBS_EXCLUDE_DIRS=""
JOBS_INCLUDE_DIRS=""
INCLUDE_FILES="secret.key secret.key.not-so-secret"
INCLUDE_DIRS="labels nodes log users userContent email-templates secrets"
LOCALCLI_KEY="${HOME}/.ssh/id_dsa"
FORCE_PUSH_TIME=3600
EXCLUDE_FILES="secrets/cmssdt-es-secret secrets/github_hook_secret_cmsbot"
while [[ $# -gt 0 ]] ; do
  opt=$1; shift
  case $opt in
    -p|--push)         PUSH_CHG=true;;
    -f|--force)        FORCE_PUSH=true;;
    -F|--push-time)    FORCE_PUSH_TIME=$1; shift;;
    -h|--home)         JENKINS_HOME=$1; shift ;;
    -r|--repository)   BACK_REPO=$1; shift ;;
    -J|--exclude-jobs) JOBS_EXCLUDE_DIRS=$1; shift;;
    -j|--include-jobs) JOBS_INCLUDE_DIRS=$1; shift;;
    -i|--include-files)INCLUDE_FILES="${INCLUDE_FILES} $1"; shift;;
    -I|--include-dirs) INCLUDE_DIRS="${INCLUDE_DIRS} $1"; shift;;
    -k|--key)          LOCALCLI_KEY=$1; shift;;
    -u|--jenkins-url)  JENKINS_URL=$1; shift;;
    -X|--exclude-files)EXCLUDE_FILES="${IGNORE_FILES} $1" ; shift;;
  esac
done
if [ "X${BACK_REPO}" = "X" ] ; then
  echo "ERROR: Missing backup repository. Usage $0 -r https://github.com/user/repo"
  exit 1
fi
if [ "X$JENKINS_HOME" = "X" ] ; then JENKINS_HOME=/var/lib/jenkins ; fi
if [ "X$WORKSPACE" = "X" ] ; then WORKSPACE=$(/bin/pwd) ; fi
script_dir=$(dirname $0)
jenkins_prefix=
if [ -e ${JENKINS_HOME}/jenkins_prefix ] ; then
  jenkins_prefix=$(cat ${JENKINS_HOME}/jenkins_prefix)
  if [ "${jenkins_prefix}" = "" ] ; then
    echo "ERROR: Empty ${JENKINS_HOME}/jenkins_prefix. Please populate it with jenkins prefix e.g. jenkins and then run"
    exit 1
  fi
fi
JENKINS_PORT=$(pgrep -x -a  -f ".*httpPort=.*" | tail -1 | tr ' ' '\n' | grep httpPort | sed 's|.*=||')
LOCAL_JENKINS_URL=http://localhost:${JENKINS_PORT}
if [ ! -f $WORKSPACE/jenkins-cli.jar ] ; then
  /usr/bin/wget --no-check-certificate -O ${WORKSPACE}/jenkins-cli.jar "${LOCAL_JENKINS_URL}/${jenkins_prefix}/jnlpJars/jenkins-cli.jar" || true
fi
if [ "X$JENKINS_URL" = "X" ] ; then JENKINS_URL="http://$(hostname -f):${JENKINS_PORT}/${jenkins_prefix}" ; fi
branch=$(java -jar ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} version)
if [ "X$branch" = "X" ] ; then
  echo "Error: Unable to find jenkins version"
  exit 1
fi
GIT_BRANCH=${jenkins_prefix}${branch}
GIT_DIR=${WORKSPACE}/backup/${GIT_BRANCH}
mkdir -p $(dirname $GIT_DIR)
if [ ! -d $GIT_DIR ] ; then git clone $BACK_REPO $GIT_DIR ; fi
cd $GIT_DIR
if [ $(git branch -a | grep remotes/origin/${GIT_BRANCH} | wc -l) -gt 0 ] ; then
  git clean -fdx
  git checkout -q --force $GIT_BRANCH
  git pull origin $GIT_BRANCH
  git reset --hard origin/$GIT_BRANCH
else
  git checkout --orphan ${GIT_BRANCH}
  rm -rf * || true
  touch README.md
  git add -A
  git commit -a -m "Init new branch ${GIT_BRANCH}"
  if $PUSH_CHG ; then git push origin $GIT_BRANCH ; fi
fi
LAST_COMMIT_TIME=$(git log -1 --date=short --pretty=format:%ct)

#################################
#Copy all configuration files
#################################
#Copy top level xml files
find $JENKINS_HOME -maxdepth 1 -mindepth 1 -name '*.xml' -type f -print0  | while IFS= read -r -d '' file; do
  cp -f "${file}" ${GIT_DIR}/
done

#Copy any extra non xml files
for f in ${INCLUDE_FILES} ; do
  if [ -e "${JENKINS_HOME}/$f" ] ; then
    d=$(dirname "$f")
    mkdir -p "$d"
    cp -rf "${JENKINS_HOME}/$f" "${GIT_DIR}/${d}/"
  else
    rm -rf "${GIT_DIR}/$f"
  fi
done

#Copy configuration directories
for dir in ${INCLUDE_DIRS}; do
  if [ ! -e $JENKINS_HOME/$dir ] ; then
     rm -rf "${GIT_DIR}/${dir}"
     continue
  fi
  mkdir -p "${GIT_DIR}/${dir}"
  rsync -av --delete --delete-excluded --exclude='**/.git' --exclude='**/.git/*' --exclude='**/.ssh' --exclude='**/.ssh/*' "${JENKINS_HOME}/${dir}/" "${GIT_DIR}/${dir}/"
done

#Copy Jobs
mkdir -p $GIT_DIR/jobs
JOBS_EXCLUDE_FILTER="--exclude='*/disk-usage.xml'"
for exl in ${JOBS_EXCLUDE_DIRS} '.git' 'builds' 'lastStable' 'lastSuccessful' '.ssh' ; do
  if [ "X${exl}" = "X" ] ; then continue ; fi
  JOBS_EXCLUDE_FILTER="${JOBS_EXCLUDE_FILTER} --exclude='**/${exl}' --exclude='**/${exl}/*'"
done
JOBS_INCLUDE_FILTER=""
for inc in ${JOBS_INCLUDE_DIRS} 'config.xml' 'nextBuildNumber' ; do
  if [ "X${inc}" = "X" ] ; then continue ; fi
  JOBS_INCLUDE_FILTER="${JOBS_INCLUDE_FILTER} --include='**/${inc}'"
done
eval rsync -av --delete --delete-excluded ${JOBS_INCLUDE_FILTER} ${JOBS_EXCLUDE_FILTER} $JENKINS_HOME/jobs/ $GIT_DIR/jobs/

############################
# Delete un-needed stuff
############################
#Delete scriptler
rm -rf $GIT_DIR/scriptler

#Drop 
for is in ${EXCLUDE_FILES} ; do rm -rf "${GIT_DIR}/${is}" ; done

#Delete top level files which are not in JENKINS_HOME
find . -maxdepth 1 -mindepth 1 -name '*' -print0  | while IFS= read -r -d '' file; do
  [ $(echo "${file}" | grep '/\.jenkins-backup$\|/\.git$' | wc -l) -eq 1 ] && continue
  [ -e "${JENKINS_HOME}/${file}" ] && continue
  rm -rf "${file}"
done

###################################
#Make some parameters relocatable
###################################
for k in LOCAL_JENKINS_DSA_KEY LOCAL_JENKINS_URL JENKINS_PREFIX ; do
  sed -i "/>$k</{n;s/>[^>]*</>@$k@</}" ${GIT_DIR}/config.xml
done

for f in $(grep "${JENKINS_URL}" ${GIT_DIR}/*.xml | sed 's|.xml:.*|.xml|' | sort | uniq) ; do
  sed -i -e "s|${JENKINS_URL}|@JENKINS_URL@|" $f
done

#Generate plugin list
java -jar  ${WORKSPACE}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} -remoting groovy $script_dir/get_plugins.groovy | grep -v 'scriptler' | sort > $GIT_DIR/pluginslist.conf
if [ $(grep ':' $GIT_DIR/pluginslist.conf | wc -l) -eq 0 ] ; then
  echo "ERROR: unable to get plugins"
  exit 1
fi

#Generate disabled job list and make all jobs by default disabled.
rm -f ${GIT_DIR}/disabled-jobs.conf ; touch ${GIT_DIR}/disabled-jobs.conf
find ${GIT_DIR}/jobs -mindepth 2 -maxdepth 2 -name '*.xml' -type f -print0  | while IFS= read -r -d '' file; do
  [ $(grep '<disabled>true' "${file}" | wc -l) -eq 0 ] && continue
  echo "${file}" | sed "s|${GIT_DIR}/jobs/||;s|/.*$||" >> ${GIT_DIR}/disabled-jobs.conf
  if [ $(grep '<disabled>false' "${file}" | wc -l) -gt 0 ] ; then
    sed -i -e 's|<disabled>false|<disabled>true|' "${file}"
  fi
done

#######################
#Encrypt files
#######################
#Encrypt xml files
rm -f files.conf
find $GIT_DIR -name '*' -type f | sed "s|$GIT_DIR/||" | grep -v '^\.jenkins-backup/\|^\.git/\|/nextBuildNumber$' | grep -v '\.md$\|\.txt$\|\.conf$' > files.conf
grep '\.xml$' files.conf | while IFS= read -r file; do
  ${script_dir}/jenkins-encrypt.py -p -P $LOCALCLI_KEY "${file}"
done

#Encrypt non-xml files
grep -v '\.xml$' files.conf | while IFS= read -r file; do
  ${script_dir}/jenkins-encrypt.py -P $LOCALCLI_KEY "${file}"
done

rm -f files.conf
XFILES="false"
grep -Ri 'token\|pass\|secret' --exclude-dir=.git --include='*.xml' --include='contents' $GIT_DIR | grep ': *<' | grep -v ': *<[^>]*> *$' | while IFS= read -r data ; do
  f=$(echo $data | sed 's|:.*||')
  d=$(echo $data | sed 's|.*:||')
  [ $(echo $d | grep -f ${script_dir}/etc/pass_keys.txt | wc -l) -gt 0 ] && continue
  if [ "$XFILES" = "false" ] ; then echo "ERROR: Found files with secrets/token/password in them" ; fi
  echo $data
  XFILES="true"
done
if [ "$XFILES" = "false" ] ; then exit 1 ;fi

if $PUSH_CHG ; then
  git add . || true
  git commit -a -m "Updated Jenkins configuration: $(date)" || true
  #Force Commit every $FORCE_PUSH_TIME sec
  if ! ${FORCE_PUSH} ; then
    let DIFF=$(date +%s)-${LAST_COMMIT_TIME} || true
    if [ $DIFF -gt $FORCE_PUSH_TIME ] ; then FORCE_PUSH=true ; fi
  fi
  if ${FORCE_PUSH} || [ $(git diff --name-only HEAD origin/$GIT_BRANCH | grep -v 'queue.xml$\|/nextBuildNumber$\|AsyncResourceDisposer.xml$' | wc -l) -gt 0 ] ; then
    echo ">> Files changed"
    git diff --name-only HEAD origin/$GIT_BRANCH
    git push origin $GIT_BRANCH
    exit 0
  fi
  git reset --hard HEAD~1
  git repack -a -d
  git gc --aggressive
fi
