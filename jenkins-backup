#!/bin/bash -ex
FORCE_ENC=$1
PUSH_CHG=$2
FORCE_PUSH=$3
JENKINS_HOME=/var/lib/jenkins
script_dir=$(dirname $0)
LOCALCLI_KEY=${JENKINS_HOME}/.ssh/id_dsa
jenkins_prefix=$(cat ${JENKINS_HOME}/jenkins_prefix)
if [ "${jenkins_prefix}" = "" ] ; then
  echo "ERROR: Empty ${JENKINS_HOME}/jenkins_prefix. Please populate it with jenkins prefix e.g. jenkins and then run"
  exit 1
fi
branch=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -i $LOCALCLI_KEY -s http://localhost:8080/${jenkins_prefix} version | cut -d. -f1,2 | sed 's|.$||;s|\.$|\.0|')
GIT_BRANCH=${jenkins_prefix}${branch}
GIT_DIR=${JENKINS_HOME}/jenkins-backup/${GIT_BRANCH}

if [ ! -d $GIT_DIR ] ; then
  mkdir -p ${JENKINS_HOME}/jenkins-backup
  git clone https://:@gitlab.cern.ch:8443/cms-sw/cmsjenkins.git $GIT_DIR
fi
cd $GIT_DIR
if [ $(git branch -a | grep remotes/origin/${GIT_BRANCH} | wc -l) -gt 0 ] ; then
  git checkout ${GIT_BRANCH} || true
  git clean -fdx
  git checkout -q --force $GIT_BRANCH
  git reset --hard origin/$GIT_BRANCH
else
  git checkout --orphan ${GIT_BRANCH}
  rm -rf * || true
  touch README.md
  git add -A
  git commit -a -m "Init new branch ${GIT_BRANCH}"
  git push origin ${GIT_BRANCH}
fi

for dir in labels users nodes log ; do
  mkdir -p $GIT_DIR/$dir
  rsync -av --delete --include="*.xml" --delete-excluded  --exclude='*/.git*' $JENKINS_HOME/$dir/ $GIT_DIR/$dir/
done
rm -rf $GIT_DIR/scriptler

mkdir -p $GIT_DIR/jobs $GIT_DIR/secrets
rsync -av --delete --delete-excluded --exclude="*builds*" --exclude="*/disk-usage.xml" $JENKINS_HOME/jobs/ $GIT_DIR/jobs/

for xml in $(ls $JENKINS_HOME/*.xml) ; do cp -f $xml $GIT_DIR/ ; done
for s in identity.key.enc secrets/org.jenkinsci.main.modules.instance_identity.InstanceIdentity.KEY ; do
  rm -f  $GIT_DIR/$s || true
done

. ${script_dir}/jenkins-secrets
for s in ${JENKINS_SECRETS_FILES} ; do
  key=$JENKINS_HOME/$s
  bkey=${GIT_DIR}/${s}.chksum
  ekey=$GIT_DIR/${s}.enc
  chksum=$(sha256sum -b $key | sed 's| .*||')
  if [ -f $bkey -a -f $ekey ] ; then
    if [ "$chksum" = "$(cat $bkey)" ] ; then
      if [ "$FORCE_ENC" != "true" ] ; then continue ; fi
    fi
  fi
  echo "$chksum" >  $bkey
  openssl enc -e -a -base64 -aes-256-cbc -salt -in $key -out ${ekey} -pass file:$LOCALCLI_KEY
done

java -jar  $JENKINS_HOME/jenkins-cli.jar -i $LOCALCLI_KEY -s http://localhost:8080/${jenkins_prefix} -remoting groovy $script_dir/get_plugins.groovy | grep -v 'scriptler' | sort > $GIT_DIR/pluginslist

if [ $(grep ':' $GIT_DIR/pluginslist | wc -l) -eq 0 ] ; then
  echo "ERROR: unable to get plugins"
  exit 1
fi
if [ "$PUSH_CHG" != "NO" ] ; then
  git add . || true
  git commit -a -m "Updated Jenkins configuration ${GIT_BRANCH}" || true
  if [ "X${FORCE_PUSH}" = "Xtrue" ] || [ $(git diff --name-only HEAD origin/$GIT_BRANCH | grep -v '/nextBuildNumber$' | wc -l) -gt 0 ] ; then
    echo ">> Files changed"
    git diff --name-only HEAD origin/$GIT_BRANCH
    git push origin $GIT_BRANCH
  fi
fi

