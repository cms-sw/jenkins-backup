#!/bin/bash -ex
JENKINS_HOME=/var/lib/jenkins
scritp_dir=$(dirname $0)
branch=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -i /home/jenkins/.ssh/id_dsa -s http://localhost:8080/jenkins version | cut -d. -f1,2 | sed 's|.$||;s|\.$|\.0|')
GIT_BRANCH=jenkins${branch}
GIT_DIR=${JENKINS_HOME}/gitlab/cmsjenkins-${branch}

if [ ! -d $GIT_DIR ] ; then
  git clone https://:@gitlab.cern.ch:8443/cms-sw/cmsjenkins.git $GIT_DIR
fi
cd $GIT_DIR
if [ $(git branch -a | grep remotes/origin/${GIT_BRANCH} | wc -l) -gt 0 ] ; then
  git checkout ${GIT_BRANCH} || true
  git clean -fdx
  git checkout -q --force $GIT_BRANCH
  git reset --hard origin/$GIT_BRANCH
  git pull --rebase
else
  git checkout --orphan ${GIT_BRANCH}
  rm -rf * || true
  touch README.md
  git add -A
  git commit -a -m "Init new branch ${GIT_BRANCH}"
  git push origin ${GIT_BRANCH}
fi

for dir in labels users nodes log scriptler ; do
  mkdir -p $GIT_DIR/$dir
  rsync -av --delete --include="*.xml" --delete-excluded  --exclude='*/.git*' $JENKINS_HOME/$dir/ $GIT_DIR/$dir/
done

mkdir -p $GIT_DIR/jobs $GIT_DIR/secrets
rsync -av --delete --delete-excluded --exclude="*builds*" --exclude="*/disk-usage.xml" $JENKINS_HOME/jobs/ $GIT_DIR/jobs/

for xml in $(ls $JENKINS_HOME/*.xml) ; do cp -f $xml $GIT_DIR/ ; done
for s in identity.key.enc secrets/org.jenkinsci.main.modules.instance_identity.InstanceIdentity.KEY ; do
  rm -f  $GIT_DIR/$s || true
done

pkey=${JENKINS_HOME}/slave_setup/cmsbot/.ssh/id_rsa-openstack
if [ ! -f $pkey ] ; then pkey=${JENKINS_HOME}/.ssh/id_rsa-openstack ; fi
. ${scritp_dir}/jenkins-support
for s in ${JENKINS_SECRETS_FILES} ; do
  key=$JENKINS_HOME/$s
  bkey=${GIT_DIR}/${s}.chksum
  ekey=$GIT_DIR/${s}.enc
  chksum=$(sha256sum -b $key | sed 's| .*||')
  if [ -f $bkey -a -f $ekey ] ; then
    if [ "$chksum" = "$(cat $bkey)" ] ; then
      continue
    fi
  fi
  echo "$chksum" >  $bkey
  openssl enc -e -a -aes-256-cbc -salt -in $key -out ${ekey} -pass file:$pkey
done

java -jar  $JENKINS_HOME/jenkins-cli.jar -i /home/jenkins/.ssh/id_dsa -s http://localhost:8080/jenkins -remoting groovy $scritp_dir/get_plugins.groovy | sort > $GIT_DIR/pluginslist

if [ $(grep ':' $GIT_DIR/pluginslist | wc -l) -eq 0 ] ; then
  echo "ERROR: unable to get plugins"
  exit 1
fi 
git add . || true
git commit -a -m "Updated Jenkins configuration ${GIT_BRANCH}" || true
if [ $(git diff --name-only HEAD origin/$GIT_BRANCH | grep -v '^jobs/update-cmsjenkins-gitlab/' | wc -l) -gt 0 ] ; then
  echo ">> Files changed"
  git diff --name-only HEAD origin/$GIT_BRANCH
  git push origin $GIT_BRANCH
fi

