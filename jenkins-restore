#!/bin/bash -ex
REPO=""
DEFAULT_BRANCH=master
FULL_VERSION=false
LOCALCLI_KEY=${HOME}/.ssh/id_dsa
while [[ $# -gt 0 ]] ; do
  opt=$1; shift
  case $opt in
    -v|--version)    FULL_VERSION=true;;
    -h|--home)       JENKINS_HOME=$1; shift ;;
    -r|--repository) REPO=$1; shift ;;
    -b|--branch)     DEFAULT_BRANCH=$1; shift;;
    -k|--key)        LOCALCLI_KEY==$1; shift;;
  esac
done
if [ "X$JENKINS_HOME" = "X" ] ; then JENKINS_HOME=/var/lib/jenkins ; fi
if [ "X${REPO}" = "X" ] ; then
  echo "ERROR: Missing backup repository. Usage $0 -r https://github.com/user/repo [-v|--version] [-b|--branch default-git-branch]"
  exit 1
fi

JENKINS_PORT=$(pgrep -x -a  -f ".*httpPort=.*" | tail -1 | tr ' ' '\n' | grep httpPort | sed 's|.*=||')
LOCAL_JENKINS_URL=http://localhost:${JENKINS_PORT}
export JENKINS_PLUGIN_REF="${JENKINS_HOME}/plugin-ref/plugins"
script_dir=$(dirname $0)
jenkins_prefix=""
if [ -f ${JENKINS_HOME}/jenkins_prefix ] ; then
  jenkins_prefix=$(cat ${JENKINS_HOME}/jenkins_prefix)
  if [ "${jenkins_prefix}" = "" ] ; then
    echo "ERROR: Empty ${JENKINS_HOME}/jenkins_prefix. Please populate it with jenkins prefix e.g. jenkins and then run"
    exit 1
  fi
fi
branch=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -i $LOCALCLI_KEY -s ${LOCAL_JENKINS_URL}/${jenkins_prefix} version)
if [ "X$branch" = "X" ] ; then 
  echo "Error: Unable to find jenkins version"
  exit 1
fi
if ! $FULL_VERSION ; then branch=$(echo $branch | cut -d. -f1,2 | sed 's|.$||;s|\.$|\.0|') ; fi
GIT_BRANCH=${jenkins_prefix}${branch}
GIT_DIR=${JENKINS_HOME}/plugin-ref/${jenkins_prefix}${GIT_BRANCH}
if [ ! -d $GIT_DIR ] ; then git clone $REPO $GIT_DIR ; fi
cd $GIT_DIR
if [ $(git branch -a | grep "remotes/origin/${GIT_BRANCH}$" | wc -l) -eq 0 ] ; then GIT_BRANCH=${DEFAULT_BRANCH} ; fi
git checkout $GIT_BRANCH
git clean -fdx
git checkout -q --force $GIT_BRANCH
git reset --hard origin/$GIT_BRANCH

for s in $(find $GIT_DIR -name '*.xml.jenkins-backup-enc' -type f | sed 's|.jenkins-backup-enc$||') ; do
  openssl enc -d -md sha256 -a -base64 -aes-256-cbc -in ${s}.jenkins-backup-enc -out $s -pass file:$LOCALCLI_KEY
done

find $GIT_DIR -name '*.xml' -type f | xargs grep ' plugin=' | sed 's|.* plugin="||;s|@.*||' | grep -v '^pipeline-' > $GIT_DIR/plugin.used
echo 'matrix-auth' >> $GIT_DIR/plugin.used
rm -rf $GIT_DIR/plugins.filter
touch $GIT_DIR/plugins.filter
for p in $(cat $GIT_DIR/plugin.used | sort -u) ; do
  grep "^$p:" $GIT_DIR/pluginslist >> $GIT_DIR/plugins.filter || true
done
rm -rf ${JENKINS_HOME}/plugin-ref/plugins/*.lock
${script_dir}/install-plugins.sh $GIT_DIR/pluginslist $GIT_DIR/plugins.filter

rsync -av --delete ${JENKINS_HOME}/plugin-ref/plugins/ ${JENKINS_HOME}/plugins/
for xml in $(ls $GIT_DIR/*.xml) ; do cp -f $xml $JENKINS_HOME/ ; done
for dir in labels users nodes log jobs userContent ; do
  mkdir -p ${JENKINS_HOME}/${dir}
  rsync -av $GIT_DIR/${dir}/ ${JENKINS_HOME}/${dir}/
done

find ${JENKINS_HOME}/jobs -follow -mindepth 2 -maxdepth 2 -name 'config.xml' -type f |  xargs -i sed -i -e 's|<disabled>false|<disabled>true|' '{}'

for s in $(find $GIT_DIR -name '*.jenkins-backup-enc' -type f | grep -v '.xml.jenkins-backup-enc' | sed "s|^${GIT_DIR}/||;s|.jenkins-backup-enc$||") ; do
  openssl enc -d -md sha256 -a -base64 -aes-256-cbc -in $GIT_DIR/${s}.jenkins-backup-enc -out $JENKINS_HOME/$s -pass file:$LOCALCLI_KEY
done

MASTER_EXEC=$(getconf _NPROCESSORS_ONLN)
if [ $MASTER_EXEC -lt 2 ] ; then MASTER_EXEC=2; fi
sed -i -e "s|<numExecutors>[0-9]*</numExecutors>|<numExecutors>${MASTER_EXEC}</numExecutors>|" $JENKINS_HOME/config.xml
if [ "X${jenkins_prefix}" != "X" ] ; then
  sed -i -e "s|:${JENKINS_PORT}/jenkins|:${JENKINS_PORT}/${jenkins_prefix}|" $JENKINS_HOME/config.xml
  for xml in hudson.tasks.Mailer.xml jenkins.model.JenkinsLocationConfiguration.xml jenkins.plugins.slack.SlackNotifier.xml ; do
    if [ -e $JENKINS_HOME/$xml ] ; then
      sed -i -e "s|cmssdt.cern.ch/jenkins|cmssdt.cern.ch/${jenkins_prefix}|" $JENKINS_HOME/$xml
    fi
  done
fi

